## ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}
## Main
# main
snippet main
	int main(int argc, const char *argv[])
	{

		int ret = 0;

		openlog("${1:`vim_snippets#Filename('$1')`}", LOG_CONS | LOG_PID, LOG_USER);

		${0}

		return 0;
	}
## Preprocessor
# #include <...>
snippet inc
	#include <${1:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"

# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif /* ifndef $1 */
# define
snippet def
	#define
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif
# header include guard
snippet once
	#pragma once



# Disable C++ name mangling in C headers
snippet nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif

	${0}

	#ifdef __cplusplus
	} /* extern "C" */
	#endif
##
## Control Statements
# quit
snippet exit
	exit(EXIT_FAILURE);

snippet exits
	exit(EXIT_SUCCESS);

# check error
snippet c
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: ${1:func}: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}



snippet mc
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: ${1:func}: %s", __func__, __LINE__, strerror(errno));
		exit(EXIT_FAILURE);
	}



# if
snippet if
	if (${1:-1 == ret}) {
		${0:${VISUAL}}
	}
snippet ife
	if (${1:true}) {
		${2:${VISUAL}}
	} else {
		${0}
	}
# else
snippet el
	else {
		${0:${VISUAL}}
	}
# else if
snippet elif
	else if (${1:true}) {
		${0:${VISUAL}}
	}
# ifi
snippet ifi
	if (${1:true}) ${0};
# ternary
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
snippet ret
	return ${0};
##
## Loops
# for
snippet for
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
# for (custom)
snippet forr
	for (int ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}
# while
snippet wh
	while (${1:/* condition */}) {
		${0:${VISUAL}}
	}
# do... while
snippet do
	do {
		${0:${VISUAL}}
	} while (${1:/* condition */});
##
## Functions
# function definition
snippet f
	${1:int} ${2:`vim_snippets#Filename('$1')`}${3:}(struct app * app)
	{

		int ret = 0;

		${0}

		return 0;
	}


# function definition with zero parameters
snippet fun0
	${1:void} ${2:function_name}()
	{
		${3}
	}
# function definition with Doxygen documentation
snippet dfun0
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \return ${3:Return parameter description}
	 */
	${4:void} ${5:function_name}()
	{
		${6}
	}
# function definition with one parameter
snippet fun1
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter})
	{
		${5}
	}
# function definition with one parameter with  Doxygen documentation
snippet dfun1
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \return ${5:Return parameter description}
	 */
	${6:void} ${7:function_name}(${8:Type} ${3:Parameter})
	{
		${9}
	}
# function definition with two parameters
snippet fun2
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})
	{
		${7}
	}
# function definition with two parameters with  Doxygen documentation
snippet dfun2
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \param $5 ${6:Parameter description}
	 * \return ${7:Return parameter description}
	 */
	${8:void} ${9:function_name}(${10:Type} ${3:Parameter}, ${11:Type} ${5:Parameter})
	{
		${12}
	}
# function definition with three parameters
snippet fun3
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})
	{
		${9}
	}
# function definition with three parameters with  Doxygen documentation
snippet dfun3
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \param $5 ${6:Parameter description}
	 * \param $7 ${8:Parameter description}
	 * \return ${9:Return parameter description}
	 */
	${10:void} ${11:function_name}(${12:Type} ${3:Parameter}, ${13:Type} ${5:Parameter}, ${14:Type} ${7:Parameter})
	{
		${15}
	}
# function declaration
snippet fd
	${1:void} ${2:function_name}(${3});
##
## Types
# typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};
# struct
snippet st
	struct ${1:app} {
		${2:int epoll_fd;}
	};



# typedef struct
snippet tds
	/*! \struct $2
	 *  \brief ${5:Brief struct description}
	 *
	 *  ${6:Detailed description}
	 */
	typedef struct ${2:_$1 }{
		m_${3:Data} /*!< ${4:Description} */
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};

snippet enum
	/*! \enum $1
	 *
	 *  ${2:Detailed description}
	 */
	enum ${1:name} { ${0} };
# typedef enum
snippet tde
	/*! \enum $2
	 *
	 *  ${4:Detailed description}
	 */
	typedef enum {
		${1:Data} /*!< ${3:Description} */
	} ${2:foo};
##
## Input/Output
# printf
snippet pr
	printf("${1:%s}\n"${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});
snippet prd
	printf("${1:} = %d\n", $1);
snippet prf
	printf("${1:} = %f\n", $1);
snippet prx
	printf("${1:} = %${2}\n", $1);
# getopt
snippet getopt
	int choice;
	while (1)
	{
		static struct option long_options[] =
		{
			/* Use flags like so:
			{"verbose",	no_argument,	&verbose_flag, 'V'}*/
			/* Argument styles: no_argument, required_argument, optional_argument */
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		/* Argument parameters:
			no_argument: " "
			required_argument: ":"
			optional_argument: "::" */

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				/* getopt_long will have already printed an error */
				break;

			default:
				/* Not sure how to get here... */
				return EXIT_FAILURE;
		}
	}

	/* Deal with non-option arguments here */
	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}
##
# TODO section
snippet todo
	/*! TODO: ${1:Todo description here}
	 *  \todo $1
	 */
## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
## templates
snippet stdh
	#pragma once

	// Try to not define _GNU_SOURCE or _DEFAULT_SOURCE, since those enable
	// glibc-specific features. Being able to compile to e.g. musl or uclibc
	// makes porting to embedded linux systems much easier (and generally
	// pressures the programmer into stricter and better programming practices).
	#define _POSIX_C_SOURCE 201805L

	#include <stdlib.h>
	#include <stdint.h>
	#include <stdbool.h>
	#include <stdio.h>
	#include <unistd.h>
	#include <fcntl.h>
	#include <errno.h>
	#include <string.h>
	#include <syslog.h>
	#include <sys/stat.h>
	#include <pthread.h>

	struct app {
		sigset_t sigset;
		int socket_pair[2];
		pthread_t serial_task;
		int serial_task_epoll_fd;
		int serial_task_fd;
		int serial_task_fd_watchdog;
	};


snippet temp
	// Try to not define _GNU_SOURCE or _DEFAULT_SOURCE, since those enable
	// glibc-specific features. Being able to compile to e.g. musl or uclibc
	// makes porting to embedded linux systems much easier (and generally
	// pressures the programmer into stricter and better programming practices).
	#define _POSIX_C_SOURCE 201805L

	#include <stdlib.h>
	#include <stdint.h>
	#include <stdbool.h>
	#include <stdio.h>
	#include <unistd.h>
	#include <fcntl.h>
	#include <errno.h>
	#include <string.h>
	#include <syslog.h>
	#include <sys/stat.h>

	#include "`vim_snippets#Filename('$1.h')`" // (snippet: 'stdh')

	int main(const int argc, const char *argv[])
	{

		int ret = 0;

		openlog("${1:`vim_snippets#Filename('$1')`}", LOG_CONS | LOG_PID, LOG_USER);

		struct app app = {0};
		ret = `vim_snippet#Filename('$1')`_init(&app);
		if (-1 == ret) {
			syslog(LOG_ERR, "%s:%d: 
		}

		exit(EXIT_SUCCESS);	
	}


## epolltemp
snippet epolltemp
	// Try to not define _GNU_SOURCE or _DEFAULT_SOURCE, since those enable
	// glibc-specific features. Being able to compile to e.g. musl or uclibc
	// makes porting to embedded linux systems much easier (and generally
	// pressures the programmer into stricter and better programming practices).
	#define _POSIX_C_SOURCE 201805L

	#include <unistd.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <fcntl.h>
	#include <stdint.h>
	#include <stdbool.h>
	#include <syslog.h>
	#include <sys/stat.h>
	#include <sys/epoll.h>

	#include "`vim_snippets#Filename('$1.h')`"

	// move to header file
	struct app {
		int epoll_fd;
		int fd;
		int fd_watchdog;
	};

	int main(const int argc, const char *argv[])
	{

		int ret = 0;

		openlog("${1:`vim_snippets#Filename('$1')`}", LOG_CONS | LOG_PID, LOG_USER);

		struct app app = {0};
		ret = app_init(&app);
		if (-1 == ret) {
			syslog(LOG_ERR, "%s:%d: app_init() returned -1", __func__, __LINE__);
			exit(EXIT_FAILURE);
		}

		exit(EXIT_SUCCESS);	
	}


## common stuff
snippet init
	struct app app = {0};
	ret = $1_init(&app);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: open: %s", __func__, __LINE__, strerror(errno));
		exit(EXIT_FAILURE);
	}



## common includes
snippet feat
	// Try to not define _GNU_SOURCE or _DEFAULT_SOURCE, since those enable
	// glibc-specific features. Being able to compile to e.g. musl or uclibc
	// makes porting to embedded linux systems much easier (and generally
	// pressures the programmer into stricter and better programming practices).
	#define _POSIX_C_SOURCE 201805L


snippet icom
	#include <stdlib.h>
	#include <stdint.h>
	#include <stdbool.h>
	#include <stdio.h>
	#include <unistd.h>
	#include <fcntl.h>
	#include <errno.h>
	#include <string.h>
	#include <syslog.h>
	#include <sys/stat.h>
	#include <sys/epoll.h>
	#include <sys/timerfd.h>


snippet isyslog
	#include <syslog.h>


snippet itimerfd
	// remember to set _POSIX_C_SOURCE.
	#include <sys/timerfd.h>


snippet iepoll
	#include <sys/epoll.h>


snippet ierrno
	#include <errno.h>


## ipc
snippet pipe
	// a pipe for communication between threads/forks.
	// $1[0] contains the read-end of the pipe, $1[1] contains the write-end.
	ret = pipe2(${1:app->pipe}, O_CLOEXEC | O_NONBLOCK);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: pipe2: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}
snippet socketpair
	// a bidirectional communication channel between threads/forks
	ret = socketpair(AF_UNIX, SOCK_STREAM | SOCK_NONBLOCK | SOCK_CLOEXEC, 0, ${1:app->socketpair});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: socketpair: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}
## open files
snippet open
	// open(2) flags:
	//   O_RDONLY   - read only
	//   O_WRONLY   - write only
	//   O_RDWR     - read/write
	//   O_CREAT    - create if does not exist (see open(2))
	//   O_EXCL     - use with O_CREAT to guarantee creation of file
	//   O_SYNC     - write(2) will sync to hardware before returning
	//   O_DIRECT   - try to not cache reads and writes (probably use O_SYNC instead)
	//   O_APPEND   - atomically append to file (seeking -> writing is not atomic)
	//   O_ASYNC    - use signal-driven I/O; default is SIGIO (warning!)
	//   O_CLOEXEC  - closes the file on exec() - just do it.
	//                this interacts badly with threads, signal will be sent to
	//                random thread in the program. If signal-driven I/O is
	//                wanted, then change the signal to some real-time signal,
	//                and implement synchronous signal handing using
	//                sigwaitinfo(2).
	//   O_NONBLOCK - open in non-blocking mode - is generally a good idea to prevent deadlock
	//   O_TMPFLIE  - create temporary file; filename specifies directory.
	${1:app->fd} = open(
		/* path  = */ ${2:"/dev/urandom"},
		/* flags = */ ${3:O_RDONLY} | O_CLOEXEC | O_NONBLOCK
	);
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d: open: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}



## Syslog
snippet syslog
	// NOTE TO SELF: snippets available for syslog:
	//   * openlog - opens syslog
	//   * err     - syslog() error message
	//   * info    - syslog() info message
	// Remember to #include <syslog.h> (snip 'isyslog')



snippet openlog
	// Remember to #include <syslog.h> (snip isyslog)
	openlog("${1:`vim_snippets#Filename('$1')`}", LOG_CONS | LOG_PID, LOG_USER);



snippet err
	syslog(LOG_ERR, "%s:%d: ${1:func}: %s", __func__, __LINE__, strerror(errno));


snippet info
	syslog(LOG_INFO, "${1:msg}"${2:});


## Epoll
snippet epoll
	// NOTE TO SELF: snippets available for epoll:
	//   * epc - create epoll
	//   * epa - add fd to epoll
	//   * epd - delete fd from epoll
	//   * epm - modify (re-arm) fd in epoll
	//   * epw - main epoll_wait loop
	// To use epoll, remember to #include <sys/epoll.h> (snip 'iepoll')
snippet epc
	// Create the epoll instance
	${1:`vim_snippets#Filename('$1')`->epoll_fd} = epoll_create1(EPOLL_CLOEXEC);
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_create1: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
snippet epa
	ret = epoll_ctl(
		${1:`vim_snippets#Filename('$1')`->epoll_fd},
		EPOLL_CTL_ADD,
	    ${2:fd},
		&(struct epoll_event){
			.events = EPOLLIN | EPOLLERR | EPOLLHUP | EPOLLONESHOT,
			.data = {
				.fd = $2
			}
		}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_ctl: %s", __FILE__, __LINE__, __func__, strerror(errno));
		return -1;
	}
snippet epr
	// Remember to EPOLL_CTL_DEL *before* closing the file descriptor, see
	// https://idea.popcount.org/2017-03-20-epoll-is-fundamentally-broken-22/
	ret = epoll_ctl(
		${1:epoll_fd},
		EPOLL_CTL_DEL,
	    ${2:fd},
		NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: epoll_ctl: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}

	
snippet epd
	// Remember to EPOLL_CTL_DEL *before* closing the file descriptor, see
	// https://idea.popcount.org/2017-03-20-epoll-is-fundamentally-broken-22/
	ret = epoll_ctl(
		${1:epoll_fd},
		EPOLL_CTL_DEL,
	    ${2:fd},
		NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: epoll_ctl: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}

	

snippet epoll_remove
	// Remember to EPOLL_CTL_DEL *before* closing the file descriptor, see
	// https://idea.popcount.org/2017-03-20-epoll-is-fundamentally-broken-22/
	ret = epoll_ctl(
		${1:epoll_fd},
		EPOLL_CTL_DEL,
	    ${2:fd},
		NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: epoll_ctl: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}

	

snippet epm
	// Re-arm EPOLLONESHOT file descriptor in epoll
	ret = epoll_ctl(
		${1:epoll_fd},
		EPOLL_CTL_MOD,
		${2:fd},
		&(struct epoll_event){
			.events = EPOLLIN | EPOLLOUT | EPOLLERR | EPOLLHUP | EPOLLET | EPOLLONESHOT,
			.data = {
				.fd = $2
			}
		}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: epoll_ctl: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}
snippet epw
	int ep_events_len = 0;
	struct epoll_event ep_events[EPOLL_NUM_EVENTS];
	for (ep_events_len = epoll_wait(${1:`vim_snippets#Filename('$1')`->epoll_fd}, ep_events, EPOLL_NUM_EVENTS, -1);
	     ep_events_len > 0;
	     ep_events_len = epoll_wait($1, ep_events, EPOLL_NUM_EVENTS, -1))
	{
		// (snippet: epev)
		ret = ${2:`vim_snippets#Filename('$1')`}_epoll_handle_events(${2:`vim_snippets#Filename('$1')`}, ep_events, ep_events_len);
		if (-1 == ret) {
			break;
		}
	}
	if (-1 == ep_events_len) {
		syslog(LOG_ERR, "%s:%d:%s: epoll_wait: %s", __FILE__, __LINE__, __func__, strerror(errno));
		exit(EXIT_FAILURE);
	}
	${0}
snippet epev
	static int `vim_snippets#Filename('$1')`_epoll_handle_events (
	    struct `vim_snippets#Filename('$1')`_s * `vim_snippets#Filename('$1')`,
		struct epoll_event epoll_events[EPOLL_NUM_EVENTS],
		int ep_events_len
	)
	{
		int ret = 0;
		for (int i = 0; i < ep_events_len; i++) {
			// (snippet: epdisp)
			ret = `vim_snippets#Filename('$1')`_epoll_event_dispatch(`vim_snippets#Filename('$1')`, &epoll_events[i]);
			if (0 != ret) {
				return ret;
			}
		}
	}
	${0}
snippet epdisp
	static int app_epoll_event_dispatch(
		struct app * app,
		struct * epoll_event event
	)
	{
		if (event->data.fd == app->fd)
			return app_epoll_event_fd(app, event);

		syslog(LOG_WARN, "No match on epoll event.");
		return 0;
	}


## timerfds
snippet timerfd
	// NOTE TO SELF: snippets available for timerfd:
	//   * timerfdc - create a timerfd
	//   * timerfds - timerfd_settime
	// Remember to #include <sys/timerfd.h> (snip 'itimerfd')



snippet timerfdc
	// create timerfd
	${1:app->nats_watchdog} = timerfd_create(CLOCK_MONOTONIC, TFD_CLOEXEC);
	if (-1 == $1) {
		syslog(LOG_ERR, "%s:%d: timerfd_create: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}



snippet timerfds
	// arm timerfd
	ret = timerfd_settime(
		/* fd        = */ ${1:app->nats_watchdog},
		/* opt       = */ 0,
		/* timerspec = */ &(struct itimerspec) {
			.it_interval = {0},
			.it_value = {
				.tv_sec  = 10,
				.tv_nsec = 0
			}
		},
		/* old_ts    = */ NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: timerfd_settime: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}



## signals
snippet signal
	// NOTE TO SELF: snippets available for signal:
	//   * sigblock    - set up sigprocmask with sensible stuff
	//   * sigw        - signal event handler loop
	//   * sigemptyset
	//   * sigaddset
	//   * sigprocmask
	// Remember to #include <signal.h> (snip 'isignal') and set feature test def


snippet sigemptyset
	ret = sigemptyset(${1:app->sigset});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: sigemptyset: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}



snippet sigaddset
	ret = sigaddset(${1:app->sigset}, ${2:SIGPIPE});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: sigaddset: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}


	
snippet sigprocmask
	ret = sigprocmask(
			/* how = */ SIG_BLOCK,
			/* set = */ ${1:app->sigset},
			/* old = */ NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: sigprocmask: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}



snippet sigblock
	// block signals; use sigwaitinfo to synchronously receive these signals instead.
	ret = sigemptyset(${1:app->sigset});
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: sigemptyset: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}

	ret = sigaddset($1, SIGPIPE);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: sigaddset: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}

	ret = sigaddset($1, SIGTERM);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: sigaddset: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}

	ret = sigaddset($1, SIGINT);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: sigaddset: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}

	ret = sigprocmask(
			/* how = */ SIG_BLOCK,
			/* set = */ $1,
			/* old = */ NULL
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: sigprocmask: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}



snippet sigw
	siginfo_t siginfo;
	int signal_number = 0;
	for (signal_number = sigwaitinfo(${1:&app->sigset}, &siginfo);
	     signal_number != -1;
	     signal_number = sigwaitinfo(${1:&app->sigset}, &siginfo))
	{
		syslog(LOG_INFO, "signal cought");
		// dispatch on siginfo...
		// pthread_cancel -> pthread_join?
		// write to stderr, out?
	}
	if (-1 == signal_number) {
		syslog(LOG_ERR, "%s:%d: sigwaitinfo: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}


## threading
snippet pthread
	// NOTE TO SELF: snippets available for pthread:
	//   * pthreadc - create pthread
	//   * pthreadd - cancel (delete) a pthread (async)
	//   * pthreadj - join a pthread
	//   * pthreadf - a pthread function definition
	// Remember to #include <pthread.h> (snip 'ipthread')


snippet pthreadc
	ret = pthread_create(${1:&app->}${2:socketcan_task}, NULL, ${3:socketcan_task}, ${4:app});
	if (0 != ret) {
		syslog(LOG_ERR, "%s:%d: pthread_create: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}


snippet pthreadf
	void * ${1:`vim_snippets#Filename('$1', 'socketcan_task')`}(void * arg)
	{
		struct app * app = arg;

		${0}

		return NULL;
	}


snippet pthreadj
	ret = pthread_join(
		/* task = */ ${1:app->socketcan_task}, 
		/* ret  = */ ${2:NULL}
	);
	if (-1 == ret) {
		syslog(LOG_ERR, "%s:%d: pthread_join: %s", __func__, __LINE__, strerror(errno));
		return -1;
	}


